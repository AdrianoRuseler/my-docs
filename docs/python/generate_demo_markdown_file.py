from faker import Faker
import random

def generate_demo_markdown_file(filename="demo.md", num_sections=3, paragraphs_per_section=(2, 5), sentences_per_paragraph=(4, 8)):
    """
    Generates a demo Markdown file with various types of content using Faker.

    Args:
        filename (str): The name of the Markdown file to create.
        num_sections (int): The number of main sections in the document.
        paragraphs_per_section (tuple): A tuple (min, max) for the number of paragraphs per section.
        sentences_per_paragraph (tuple): A tuple (min, max) for the number of sentences per paragraph.
    """
    fake = Faker()

    with open(filename, "w", encoding="utf-8") as f:
        # Main Title
        f.write(f"# {fake.catch_phrase().title()}\n\n")
        f.write(f"_{fake.sentence(nb_words=10).strip('.')}_ \n\n")

        # Table of Contents (placeholder)
        f.write("## Table of Contents\n\n")
        for i in range(1, num_sections + 1):
            f.write(f"- [Section {i}: {fake.words(nb=3, unique=True)[0].title()}](#section-{i})\n")
        f.write("\n")

        for i in range(1, num_sections + 1):
            # Section Title
            section_title = f"Section {i}: {fake.sentence(nb_words=5).strip('.')}"
            f.write(f"## {section_title}\n\n")
            f.write(f"<a name=\"section-{i}\"></a>\n\n") # Anchor for TOC

            # Introduction paragraph for the section
            f.write(f"{fake.paragraph(nb_sentences=random.randint(*sentences_per_paragraph))}\n\n")

            # Sub-sections (optional)
            if random.random() < 0.5: # 50% chance of having sub-sections
                num_subsections = random.randint(1, 3)
                for j in range(1, num_subsections + 1):
                    f.write(f"### Sub-section {j}: {fake.sentence(nb_words=4).strip('.')}\n\n")
                    f.write(f"{fake.paragraph(nb_sentences=random.randint(*sentences_per_paragraph))}\n\n")

            # Paragraphs
            for _ in range(random.randint(*paragraphs_per_section)):
                num_sentences = random.randint(*sentences_per_paragraph)
                paragraph = fake.paragraph(nb_sentences=num_sentences)
                f.write(f"{paragraph}\n\n")

            # Lists
            if random.random() < 0.7: # 70% chance of a list
                f.write("### Key Points:\n\n")
                if random.random() < 0.5: # 50% ordered, 50% unordered
                    for k in range(random.randint(3, 6)):
                        f.write(f"- {fake.sentence(nb_words=random.randint(5, 10)).strip('.')}\n")
                else:
                    for k in range(random.randint(3, 6)):
                        f.write(f"{k+1}. {fake.sentence(nb_words=random.randint(5, 10)).strip('.')}\n")
                f.write("\n")

            # Code Block
            if random.random() < 0.3: # 30% chance of a code block
                f.write("### Example Code:\n\n")
                f.write("```python\n")
                f.write("def hello_world():\n")
                f.write(f"    print(\"{fake.sentence(nb_words=3).strip('.')}\")\n")
                f.write("hello_world()\n")
                f.write("```\n\n")

            # Blockquote
            if random.random() < 0.4: # 40% chance of a blockquote
                f.write(f"> {fake.sentence(nb_words=15)}\n")
                f.write(f"> -- {fake.name()}\n\n")

            # Images (placeholder for actual image)
            if random.random() < 0.2: # 20% chance of an image placeholder
                f.write(f"![{fake.word().title()} Image](https://via.placeholder.com/150/0000FF/FFFFFF?text={fake.word().upper()})\n\n")

            # Horizontal Rule
            f.write("---\n\n")

        # Conclusion
        f.write("## Conclusion\n\n")
        f.write(f"{fake.paragraph(nb_sentences=random.randint(*sentences_per_paragraph))}\n\n")

        # Author and Date
        f.write(f"*Generated by {fake.name()} on {fake.date_this_year().strftime('%B %d, %Y')}*\n")

    print(f"Demo Markdown file '{filename}' generated successfully!")

if __name__ == "__main__":
    generate_demo_markdown_file()